var _eeue56$elm_html_in_elm$ElmHtml_ToElmString$nodeToLines = F2(
	function (options, nodeType) {
		var _p0 = nodeType;
		switch (_p0.ctor) {
			case 'TextTag':
				return {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						'Html.text \"',
						A2(_elm_lang$core$Basics_ops['++'], _p0._0.text, '\"')),
					_1: {ctor: '[]'}
				};
			case 'NodeEntry':
				return A2(_eeue56$elm_html_in_elm$ElmHtml_ToElmString$nodeRecordToString, options, _p0._0);
			case 'CustomNode':
				return {ctor: '[]'};
			case 'MarkdownNode':
				return {
					ctor: '::',
					_0: _p0._0.model.markdown,
					_1: {ctor: '[]'}
				};
			default:
				return {ctor: '[]'};
		}
	});
var _eeue56$elm_html_in_elm$ElmHtml_ToElmString$nodeRecordToString = F2(
	function (options, _p1) {
		var _p2 = _p1;
		var _p11 = _p2.facts;
		var boolAttributes = _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$core$String$join,
				' ',
				A2(
					_elm_lang$core$List$map,
					function (_p3) {
						var _p4 = _p3;
						return A2(
							_elm_lang$core$Basics_ops['++'],
							'Html.Attributes.property \"',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p4._0,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'\" <| Json.Encode.bool ',
									_elm_lang$core$Basics$toString(_p4._1))));
					},
					_elm_lang$core$Dict$toList(_p11.boolAttributes))));
		var stringAttributes = _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$core$String$join,
				', ',
				A2(
					_elm_lang$core$List$map,
					function (_p5) {
						var _p6 = _p5;
						return A2(
							_elm_lang$core$Basics_ops['++'],
							'Html.Attributes.',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p6._0,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' \"',
									A2(_elm_lang$core$Basics_ops['++'], _p6._1, '\"'))));
					},
					_elm_lang$core$Dict$toList(
						A2(
							_elm_lang$core$Dict$filter,
							F2(
								function (k, v) {
									return !_elm_lang$core$Native_Utils.eq(k, 'className');
								}),
							_p11.stringAttributes)))));
		var classes = A2(
			_elm_lang$core$Maybe$map,
			function (name) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'Html.Attributes.class [\"',
					A2(_elm_lang$core$Basics_ops['++'], name, '\"]'));
			},
			A2(_elm_lang$core$Dict$get, 'className', _p11.stringAttributes));
		var styles = function () {
			var _p7 = _elm_lang$core$Dict$toList(_p11.styles);
			if (_p7.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					function (styleString) {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							'Html.Attributes.style [',
							A2(_elm_lang$core$Basics_ops['++'], styleString, ']'));
					}(
						A2(
							_elm_lang$core$String$join,
							', ',
							A2(
								_elm_lang$core$List$map,
								function (_p8) {
									var _p9 = _p8;
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'(\"',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p9._0,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'\",\"',
												A2(_elm_lang$core$Basics_ops['++'], _p9._1, '\")'))));
								},
								_p7))));
			}
		}();
		var childrenStrings = A2(
			_elm_lang$core$List$map,
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				})(
				A2(_elm_lang$core$String$repeat, options.indent, ' ')),
			_elm_lang$core$List$concat(
				A2(
					_elm_lang$core$List$map,
					_eeue56$elm_html_in_elm$ElmHtml_ToElmString$nodeToLines(options),
					_p2.children)));
		var openTag = function (extras) {
			var trimmedExtras = A2(
				_elm_lang$core$List$filter,
				F2(
					function (x, y) {
						return !_elm_lang$core$Native_Utils.eq(x, y);
					})(''),
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$String$trim,
					A2(
						_elm_lang$core$List$filterMap,
						function (x) {
							return x;
						},
						extras)));
			var filling = function () {
				var _p10 = trimmedExtras;
				if (_p10.ctor === '[]') {
					return '';
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						A2(_elm_lang$core$String$join, ' ', _p10));
				}
			}();
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'Html.',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p2.tag,
					A2(_elm_lang$core$Basics_ops['++'], ' [', filling)));
		};
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: openTag(
					{
						ctor: '::',
						_0: classes,
						_1: {
							ctor: '::',
							_0: styles,
							_1: {
								ctor: '::',
								_0: stringAttributes,
								_1: {
									ctor: '::',
									_0: boolAttributes,
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: ' ] ',
				_1: {
					ctor: '::',
					_0: '[ ',
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$String$join, '', childrenStrings),
						_1: {
							ctor: '::',
							_0: ']',
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _eeue56$elm_html_in_elm$ElmHtml_ToElmString$toElmStringWithOptions = function (options) {
	return function (_p12) {
		return A2(
			_elm_lang$core$String$join,
			options.newLines ? '\n' : '',
			A2(_eeue56$elm_html_in_elm$ElmHtml_ToElmString$nodeToLines, options, _p12));
	};
};
var _eeue56$elm_html_in_elm$ElmHtml_ToElmString$defaultFormatOptions = {indent: 0, newLines: false};
var _eeue56$elm_html_in_elm$ElmHtml_ToElmString$toElmString = _eeue56$elm_html_in_elm$ElmHtml_ToElmString$toElmStringWithOptions(_eeue56$elm_html_in_elm$ElmHtml_ToElmString$defaultFormatOptions);
var _eeue56$elm_html_in_elm$ElmHtml_ToElmString$FormatOptions = F2(
	function (a, b) {
		return {indent: a, newLines: b};
	});
