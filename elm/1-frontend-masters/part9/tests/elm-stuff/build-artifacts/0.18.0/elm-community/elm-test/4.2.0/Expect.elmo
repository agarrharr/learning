var _elm_community$elm_test$Expect$relative = function (tolerance) {
	var _p0 = tolerance;
	switch (_p0.ctor) {
		case 'Relative':
			return _p0._0;
		case 'AbsoluteOrRelative':
			return _p0._1;
		default:
			return 0;
	}
};
var _elm_community$elm_test$Expect$absolute = function (tolerance) {
	var _p1 = tolerance;
	switch (_p1.ctor) {
		case 'Absolute':
			return _p1._0;
		case 'AbsoluteOrRelative':
			return _p1._0;
		default:
			return 0;
	}
};
var _elm_community$elm_test$Expect$nonNegativeToleranceError = F3(
	function (tolerance, name, result) {
		return ((_elm_lang$core$Native_Utils.cmp(
			_elm_community$elm_test$Expect$absolute(tolerance),
			0) < 0) && (_elm_lang$core$Native_Utils.cmp(
			_elm_community$elm_test$Expect$relative(tolerance),
			0) < 0)) ? _elm_community$elm_test$Test_Expectation$fail(
			{
				description: A2(
					_elm_lang$core$Basics_ops['++'],
					'Expect.',
					A2(_elm_lang$core$Basics_ops['++'], name, ' was given negative absolute and relative tolerances')),
				reason: _elm_community$elm_test$Test_Runner_Failure$Custom
			}) : ((_elm_lang$core$Native_Utils.cmp(
			_elm_community$elm_test$Expect$absolute(tolerance),
			0) < 0) ? _elm_community$elm_test$Test_Expectation$fail(
			{
				description: A2(
					_elm_lang$core$Basics_ops['++'],
					'Expect.',
					A2(_elm_lang$core$Basics_ops['++'], name, ' was given a negative absolute tolerance')),
				reason: _elm_community$elm_test$Test_Runner_Failure$Custom
			}) : ((_elm_lang$core$Native_Utils.cmp(
			_elm_community$elm_test$Expect$relative(tolerance),
			0) < 0) ? _elm_community$elm_test$Test_Expectation$fail(
			{
				description: A2(
					_elm_lang$core$Basics_ops['++'],
					'Expect.',
					A2(_elm_lang$core$Basics_ops['++'], name, ' was given a negative relative tolerance')),
				reason: _elm_community$elm_test$Test_Runner_Failure$Custom
			}) : result));
	});
var _elm_community$elm_test$Expect$withinCompare = F3(
	function (tolerance, a, b) {
		var withinRelativeTolerance = ((_elm_lang$core$Native_Utils.cmp(
			a * (1 - _elm_community$elm_test$Expect$relative(tolerance)),
			b) < 1) && (_elm_lang$core$Native_Utils.cmp(
			b,
			a * (1 + _elm_community$elm_test$Expect$relative(tolerance))) < 1)) || ((_elm_lang$core$Native_Utils.cmp(
			b * (1 - _elm_community$elm_test$Expect$relative(tolerance)),
			a) < 1) && (_elm_lang$core$Native_Utils.cmp(
			a,
			b * (1 + _elm_community$elm_test$Expect$relative(tolerance))) < 1));
		var withinAbsoluteTolerance = (_elm_lang$core$Native_Utils.cmp(
			a - _elm_community$elm_test$Expect$absolute(tolerance),
			b) < 1) && (_elm_lang$core$Native_Utils.cmp(
			b,
			a + _elm_community$elm_test$Expect$absolute(tolerance)) < 1);
		return _elm_lang$core$Native_Utils.eq(a, b) || (withinAbsoluteTolerance || withinRelativeTolerance);
	});
var _elm_community$elm_test$Expect$reportCollectionFailure = F5(
	function (comparison, expected, actual, missingKeys, extraKeys) {
		return _elm_community$elm_test$Test_Expectation$fail(
			{
				description: comparison,
				reason: _elm_community$elm_test$Test_Runner_Failure$CollectionDiff(
					{
						expected: _elm_lang$core$Basics$toString(expected),
						actual: _elm_lang$core$Basics$toString(actual),
						extra: A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, extraKeys),
						missing: A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, missingKeys)
					})
			});
	});
var _elm_community$elm_test$Expect$reportFailure = F3(
	function (comparison, expected, actual) {
		return _elm_community$elm_test$Test_Expectation$fail(
			{
				description: comparison,
				reason: A2(
					_elm_community$elm_test$Test_Runner_Failure$Comparison,
					_elm_lang$core$Basics$toString(expected),
					_elm_lang$core$Basics$toString(actual))
			});
	});
var _elm_community$elm_test$Expect$onFail = F2(
	function (str, expectation) {
		var _p2 = expectation;
		if (_p2.ctor === 'Pass') {
			return expectation;
		} else {
			return _elm_community$elm_test$Test_Expectation$Fail(
				_elm_lang$core$Native_Utils.update(
					_p2._0,
					{description: str, reason: _elm_community$elm_test$Test_Runner_Failure$Custom}));
		}
	});
var _elm_community$elm_test$Expect$fail = function (str) {
	return _elm_community$elm_test$Test_Expectation$fail(
		{description: str, reason: _elm_community$elm_test$Test_Runner_Failure$Custom});
};
var _elm_community$elm_test$Expect$pass = _elm_community$elm_test$Test_Expectation$Pass;
var _elm_community$elm_test$Expect$allHelp = F2(
	function (list, query) {
		allHelp:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return _elm_community$elm_test$Expect$pass;
			} else {
				var _p4 = _p3._0(query);
				if (_p4.ctor === 'Pass') {
					var _v5 = _p3._1,
						_v6 = query;
					list = _v5;
					query = _v6;
					continue allHelp;
				} else {
					return _p4;
				}
			}
		}
	});
var _elm_community$elm_test$Expect$all = F2(
	function (list, query) {
		return _elm_lang$core$List$isEmpty(list) ? _elm_community$elm_test$Test_Expectation$fail(
			{
				reason: _elm_community$elm_test$Test_Runner_Failure$Invalid(_elm_community$elm_test$Test_Runner_Failure$EmptyList),
				description: 'Expect.all was given an empty list. You must make at least one expectation to have a valid test!'
			}) : A2(_elm_community$elm_test$Expect$allHelp, list, query);
	});
var _elm_community$elm_test$Expect$testWith = F5(
	function (makeReason, label, runTest, expected, actual) {
		return A2(runTest, actual, expected) ? _elm_community$elm_test$Expect$pass : _elm_community$elm_test$Test_Expectation$fail(
			{
				description: label,
				reason: A2(
					makeReason,
					_elm_lang$core$Basics$toString(expected),
					_elm_lang$core$Basics$toString(actual))
			});
	});
var _elm_community$elm_test$Expect$equateWith = _elm_community$elm_test$Expect$testWith(_elm_community$elm_test$Test_Runner_Failure$Equality);
var _elm_community$elm_test$Expect$compareWith = _elm_community$elm_test$Expect$testWith(_elm_community$elm_test$Test_Runner_Failure$Comparison);
var _elm_community$elm_test$Expect$equalSets = F2(
	function (expected, actual) {
		if (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$Set$toList(expected),
			_elm_lang$core$Set$toList(actual))) {
			return _elm_community$elm_test$Expect$pass;
		} else {
			var extraKeys = _elm_lang$core$Set$toList(
				A2(_elm_lang$core$Set$diff, actual, expected));
			var missingKeys = _elm_lang$core$Set$toList(
				A2(_elm_lang$core$Set$diff, expected, actual));
			return A5(_elm_community$elm_test$Expect$reportCollectionFailure, 'Expect.equalSets', expected, actual, missingKeys, extraKeys);
		}
	});
var _elm_community$elm_test$Expect$equalDicts = F2(
	function (expected, actual) {
		if (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$Dict$toList(expected),
			_elm_lang$core$Dict$toList(actual))) {
			return _elm_community$elm_test$Expect$pass;
		} else {
			var differ = F4(
				function (dict, k, v, diffs) {
					return _elm_lang$core$Native_Utils.eq(
						A2(_elm_lang$core$Dict$get, k, dict),
						_elm_lang$core$Maybe$Just(v)) ? diffs : {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: k, _1: v},
						_1: diffs
					};
				});
			var missingKeys = A3(
				_elm_lang$core$Dict$foldr,
				differ(actual),
				{ctor: '[]'},
				expected);
			var extraKeys = A3(
				_elm_lang$core$Dict$foldr,
				differ(expected),
				{ctor: '[]'},
				actual);
			return A5(_elm_community$elm_test$Expect$reportCollectionFailure, 'Expect.equalDicts', expected, actual, missingKeys, extraKeys);
		}
	});
var _elm_community$elm_test$Expect$equalLists = F2(
	function (expected, actual) {
		return _elm_lang$core$Native_Utils.eq(expected, actual) ? _elm_community$elm_test$Expect$pass : _elm_community$elm_test$Test_Expectation$fail(
			{
				description: 'Expect.equalLists',
				reason: A2(
					_elm_community$elm_test$Test_Runner_Failure$ListDiff,
					A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, expected),
					A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, actual))
			});
	});
var _elm_community$elm_test$Expect$err = function (result) {
	var _p5 = result;
	if (_p5.ctor === 'Ok') {
		return _elm_community$elm_test$Test_Expectation$fail(
			{
				description: 'Expect.err',
				reason: A2(
					_elm_community$elm_test$Test_Runner_Failure$Comparison,
					'Err _',
					_elm_lang$core$Basics$toString(result))
			});
	} else {
		return _elm_community$elm_test$Expect$pass;
	}
};
var _elm_community$elm_test$Expect$false = F2(
	function (message, bool) {
		return bool ? _elm_community$elm_test$Expect$fail(message) : _elm_community$elm_test$Expect$pass;
	});
var _elm_community$elm_test$Expect$true = F2(
	function (message, bool) {
		return bool ? _elm_community$elm_test$Expect$pass : _elm_community$elm_test$Expect$fail(message);
	});
var _elm_community$elm_test$Expect$notWithin = F3(
	function (tolerance, a, b) {
		return A3(
			_elm_community$elm_test$Expect$nonNegativeToleranceError,
			tolerance,
			'notWithin',
			A4(
				_elm_community$elm_test$Expect$compareWith,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Expect.notWithin ',
					_elm_lang$core$Basics$toString(tolerance)),
				F2(
					function (a, b) {
						return !A3(_elm_community$elm_test$Expect$withinCompare, tolerance, a, b);
					}),
				a,
				b));
	});
var _elm_community$elm_test$Expect$within = F3(
	function (tolerance, a, b) {
		return A3(
			_elm_community$elm_test$Expect$nonNegativeToleranceError,
			tolerance,
			'within',
			A4(
				_elm_community$elm_test$Expect$compareWith,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Expect.within ',
					_elm_lang$core$Basics$toString(tolerance)),
				_elm_community$elm_test$Expect$withinCompare(tolerance),
				a,
				b));
	});
var _elm_community$elm_test$Expect$atLeast = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.atLeast',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) > -1;
		}));
var _elm_community$elm_test$Expect$greaterThan = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.greaterThan',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) > 0;
		}));
var _elm_community$elm_test$Expect$atMost = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.atMost',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) < 1;
		}));
var _elm_community$elm_test$Expect$lessThan = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.lessThan',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) < 0;
		}));
var _elm_community$elm_test$Expect$notEqual = A2(
	_elm_community$elm_test$Expect$equateWith,
	'Expect.notEqual',
	F2(
		function (x, y) {
			return !_elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$elm_test$Expect$equal = A2(
	_elm_community$elm_test$Expect$equateWith,
	'Expect.equal',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$elm_test$Expect$AbsoluteOrRelative = F2(
	function (a, b) {
		return {ctor: 'AbsoluteOrRelative', _0: a, _1: b};
	});
var _elm_community$elm_test$Expect$Relative = function (a) {
	return {ctor: 'Relative', _0: a};
};
var _elm_community$elm_test$Expect$Absolute = function (a) {
	return {ctor: 'Absolute', _0: a};
};
