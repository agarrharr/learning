var _elm_community$elm_test$Test_Runner$formatLabels = F3(
	function (formatDescription, formatTest, labels) {
		var _p1 = A2(
			_elm_lang$core$List$filter,
			function (_p0) {
				return !_elm_lang$core$String$isEmpty(_p0);
			},
			labels);
		if (_p1.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return _elm_lang$core$List$reverse(
				A2(
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						}),
					formatTest(_p1._0),
					A2(_elm_lang$core$List$map, formatDescription, _p1._1)));
		}
	});
var _elm_community$elm_test$Test_Runner$isTodo = function (expectation) {
	var _p2 = expectation;
	if (_p2.ctor === 'Pass') {
		return false;
	} else {
		return _elm_lang$core$Native_Utils.eq(_p2._0.reason, _elm_community$elm_test$Test_Runner_Failure$TODO);
	}
};
var _elm_community$elm_test$Test_Runner$getFailureReason = function (expectation) {
	var _p3 = expectation;
	if (_p3.ctor === 'Pass') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(_p3._0);
	}
};
var _elm_community$elm_test$Test_Runner$getFailure = function (expectation) {
	var _p4 = expectation;
	if (_p4.ctor === 'Pass') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			{
				given: _p4._0.given,
				message: A2(_elm_community$elm_test$Test_Runner_Failure$format, _p4._0.description, _p4._0.reason)
			});
	}
};
var _elm_community$elm_test$Test_Runner$fnvHash = F2(
	function (a, b) {
		return ((a ^ b) * 16777619) >>> 0;
	});
var _elm_community$elm_test$Test_Runner$fnvHashString = F2(
	function (hash, str) {
		return A3(
			_elm_lang$core$List$foldl,
			_elm_community$elm_test$Test_Runner$fnvHash,
			hash,
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Char$toCode,
				_elm_lang$core$String$toList(str)));
	});
var _elm_community$elm_test$Test_Runner$fnvInit = 2166136261;
var _elm_community$elm_test$Test_Runner$emptyDistribution = function (seed) {
	return {
		seed: seed,
		all: {ctor: '[]'},
		only: {ctor: '[]'},
		skipped: {ctor: '[]'}
	};
};
var _elm_community$elm_test$Test_Runner$run = function (_p5) {
	var _p6 = _p5;
	return _p6._0(
		{ctor: '_Tuple0'});
};
var _elm_community$elm_test$Test_Runner$fromRunnableTreeHelp = F2(
	function (labels, runner) {
		fromRunnableTreeHelp:
		while (true) {
			var _p7 = runner;
			switch (_p7.ctor) {
				case 'Runnable':
					return {
						ctor: '::',
						_0: {
							labels: labels,
							run: function (_p8) {
								return _elm_community$elm_test$Test_Runner$run(_p7._0);
							}
						},
						_1: {ctor: '[]'}
					};
				case 'Labeled':
					var _v6 = {ctor: '::', _0: _p7._0, _1: labels},
						_v7 = _p7._1;
					labels = _v6;
					runner = _v7;
					continue fromRunnableTreeHelp;
				default:
					return A2(
						_elm_lang$core$List$concatMap,
						_elm_community$elm_test$Test_Runner$fromRunnableTreeHelp(labels),
						_p7._0);
			}
		}
	});
var _elm_community$elm_test$Test_Runner$fromRunnableTree = _elm_community$elm_test$Test_Runner$fromRunnableTreeHelp(
	{ctor: '[]'});
var _elm_community$elm_test$Test_Runner$countAllRunnables = A2(
	_elm_lang$core$List$foldl,
	function (_p9) {
		return F2(
			function (x, y) {
				return x + y;
			})(
			_elm_community$elm_test$Test_Runner$countRunnables(_p9));
	},
	0);
var _elm_community$elm_test$Test_Runner$countRunnables = function (runnable) {
	countRunnables:
	while (true) {
		var _p10 = runnable;
		switch (_p10.ctor) {
			case 'Runnable':
				return 1;
			case 'Labeled':
				var _v9 = _p10._1;
				runnable = _v9;
				continue countRunnables;
			default:
				return _elm_community$elm_test$Test_Runner$countAllRunnables(_p10._0);
		}
	}
};
var _elm_community$elm_test$Test_Runner$Runner = F2(
	function (a, b) {
		return {run: a, labels: b};
	});
var _elm_community$elm_test$Test_Runner$Distribution = F4(
	function (a, b, c, d) {
		return {seed: a, only: b, all: c, skipped: d};
	});
var _elm_community$elm_test$Test_Runner$Shrunken = F2(
	function (a, b) {
		return {down: a, over: b};
	});
var _elm_community$elm_test$Test_Runner$Thunk = function (a) {
	return {ctor: 'Thunk', _0: a};
};
var _elm_community$elm_test$Test_Runner$Batch = function (a) {
	return {ctor: 'Batch', _0: a};
};
var _elm_community$elm_test$Test_Runner$Labeled = F2(
	function (a, b) {
		return {ctor: 'Labeled', _0: a, _1: b};
	});
var _elm_community$elm_test$Test_Runner$Runnable = function (a) {
	return {ctor: 'Runnable', _0: a};
};
var _elm_community$elm_test$Test_Runner$distributeSeedsHelp = F4(
	function (hashed, runs, seed, test) {
		var _p11 = test;
		switch (_p11.ctor) {
			case 'UnitTest':
				return {
					seed: seed,
					all: {
						ctor: '::',
						_0: _elm_community$elm_test$Test_Runner$Runnable(
							_elm_community$elm_test$Test_Runner$Thunk(
								function (_p12) {
									return _p11._0(
										{ctor: '_Tuple0'});
								})),
						_1: {ctor: '[]'}
					},
					only: {ctor: '[]'},
					skipped: {ctor: '[]'}
				};
			case 'FuzzTest':
				var _p13 = A2(_mgold$elm_random_pcg$Random_Pcg$step, _mgold$elm_random_pcg$Random_Pcg$independentSeed, seed);
				var firstSeed = _p13._0;
				var nextSeed = _p13._1;
				return {
					seed: nextSeed,
					all: {
						ctor: '::',
						_0: _elm_community$elm_test$Test_Runner$Runnable(
							_elm_community$elm_test$Test_Runner$Thunk(
								function (_p14) {
									return A2(_p11._0, firstSeed, runs);
								})),
						_1: {ctor: '[]'}
					},
					only: {ctor: '[]'},
					skipped: {ctor: '[]'}
				};
			case 'Labeled':
				var _p16 = _p11._1;
				var _p15 = _p11._0;
				if (hashed) {
					var next = A4(_elm_community$elm_test$Test_Runner$distributeSeedsHelp, true, runs, seed, _p16);
					return {
						seed: next.seed,
						all: A2(
							_elm_lang$core$List$map,
							_elm_community$elm_test$Test_Runner$Labeled(_p15),
							next.all),
						only: A2(
							_elm_lang$core$List$map,
							_elm_community$elm_test$Test_Runner$Labeled(_p15),
							next.only),
						skipped: A2(
							_elm_lang$core$List$map,
							_elm_community$elm_test$Test_Runner$Labeled(_p15),
							next.skipped)
					};
				} else {
					var intFromSeed = _elm_lang$core$Tuple$first(
						A2(
							_mgold$elm_random_pcg$Random_Pcg$step,
							A2(_mgold$elm_random_pcg$Random_Pcg$int, 0, _mgold$elm_random_pcg$Random_Pcg$maxInt),
							seed));
					var hashedSeed = _mgold$elm_random_pcg$Random_Pcg$initialSeed(
						A2(
							_elm_community$elm_test$Test_Runner$fnvHash,
							intFromSeed,
							A2(_elm_community$elm_test$Test_Runner$fnvHashString, _elm_community$elm_test$Test_Runner$fnvInit, _p15)));
					var next = A4(_elm_community$elm_test$Test_Runner$distributeSeedsHelp, true, runs, hashedSeed, _p16);
					return {
						seed: seed,
						all: A2(
							_elm_lang$core$List$map,
							_elm_community$elm_test$Test_Runner$Labeled(_p15),
							next.all),
						only: A2(
							_elm_lang$core$List$map,
							_elm_community$elm_test$Test_Runner$Labeled(_p15),
							next.only),
						skipped: A2(
							_elm_lang$core$List$map,
							_elm_community$elm_test$Test_Runner$Labeled(_p15),
							next.skipped)
					};
				}
			case 'Skipped':
				var next = A4(_elm_community$elm_test$Test_Runner$distributeSeedsHelp, hashed, runs, seed, _p11._0);
				return {
					seed: next.seed,
					all: {ctor: '[]'},
					only: {ctor: '[]'},
					skipped: next.all
				};
			case 'Only':
				var next = A4(_elm_community$elm_test$Test_Runner$distributeSeedsHelp, hashed, runs, seed, _p11._0);
				return _elm_lang$core$Native_Utils.update(
					next,
					{only: next.all});
			default:
				return A3(
					_elm_lang$core$List$foldl,
					A2(_elm_community$elm_test$Test_Runner$batchDistribute, hashed, runs),
					_elm_community$elm_test$Test_Runner$emptyDistribution(seed),
					_p11._0);
		}
	});
var _elm_community$elm_test$Test_Runner$batchDistribute = F4(
	function (hashed, runs, test, prev) {
		var next = A4(_elm_community$elm_test$Test_Runner$distributeSeedsHelp, hashed, runs, prev.seed, test);
		return {
			seed: next.seed,
			all: A2(_elm_lang$core$Basics_ops['++'], prev.all, next.all),
			only: A2(_elm_lang$core$Basics_ops['++'], prev.only, next.only),
			skipped: A2(_elm_lang$core$Basics_ops['++'], prev.skipped, next.skipped)
		};
	});
var _elm_community$elm_test$Test_Runner$distributeSeeds = _elm_community$elm_test$Test_Runner$distributeSeedsHelp(false);
var _elm_community$elm_test$Test_Runner$Invalid = function (a) {
	return {ctor: 'Invalid', _0: a};
};
var _elm_community$elm_test$Test_Runner$Skipping = function (a) {
	return {ctor: 'Skipping', _0: a};
};
var _elm_community$elm_test$Test_Runner$Only = function (a) {
	return {ctor: 'Only', _0: a};
};
var _elm_community$elm_test$Test_Runner$Plain = function (a) {
	return {ctor: 'Plain', _0: a};
};
var _elm_community$elm_test$Test_Runner$fromTest = F3(
	function (runs, seed, test) {
		if (_elm_lang$core$Native_Utils.cmp(runs, 1) < 0) {
			return _elm_community$elm_test$Test_Runner$Invalid(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Test runner run count must be at least 1, not ',
					_elm_lang$core$Basics$toString(runs)));
		} else {
			var distribution = A3(_elm_community$elm_test$Test_Runner$distributeSeeds, runs, seed, test);
			return _elm_lang$core$List$isEmpty(distribution.only) ? (_elm_lang$core$Native_Utils.eq(
				_elm_community$elm_test$Test_Runner$countAllRunnables(distribution.skipped),
				0) ? _elm_community$elm_test$Test_Runner$Plain(
				A2(_elm_lang$core$List$concatMap, _elm_community$elm_test$Test_Runner$fromRunnableTree, distribution.all)) : _elm_community$elm_test$Test_Runner$Skipping(
				A2(_elm_lang$core$List$concatMap, _elm_community$elm_test$Test_Runner$fromRunnableTree, distribution.all))) : _elm_community$elm_test$Test_Runner$Only(
				A2(_elm_lang$core$List$concatMap, _elm_community$elm_test$Test_Runner$fromRunnableTree, distribution.only));
		}
	});
var _elm_community$elm_test$Test_Runner$Shrinkable = function (a) {
	return {ctor: 'Shrinkable', _0: a};
};
var _elm_community$elm_test$Test_Runner$fuzz = function (fuzzer) {
	var _p17 = fuzzer;
	if (_p17.ctor === 'Ok') {
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			function (_p18) {
				var _p19 = _p18;
				return {
					ctor: '_Tuple2',
					_0: _p19._0,
					_1: _elm_community$elm_test$Test_Runner$Shrinkable(
						{down: _p19._1, over: _eeue56$elm_lazy_list$Lazy_List$empty})
				};
			},
			_p17._0);
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Test.Runner',
			{
				start: {line: 499, column: 5},
				end: {line: 508, column: 83}
			},
			_p17)(
			A2(_elm_lang$core$Basics_ops['++'], 'Cannot call `fuzz` with an invalid fuzzer: ', _p17._0));
	}
};
var _elm_community$elm_test$Test_Runner$shrink = F2(
	function (causedPass, _p21) {
		var _p22 = _p21;
		var tryNext = causedPass ? _p22._0.over : _p22._0.down;
		var _p23 = _eeue56$elm_lazy_list$Lazy_List$headAndTail(tryNext);
		if (_p23.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '_Tuple2',
					_0: _p23._0._0._0,
					_1: _elm_community$elm_test$Test_Runner$Shrinkable(
						{down: _p23._0._0._1, over: _p23._0._1})
				});
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
